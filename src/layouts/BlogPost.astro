---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "@/components/FormattedDate";
import BaseLayout from "@/layouts/BaseLayout";
import Tag from "@/components/Tag";
import type { MarkdownHeading } from "astro";
import { Image } from "astro:assets";
import BackToTop from "@/components/icons/BackToTop";

type Props = {
	id: CollectionEntry<"blog">["id"];
	data: CollectionEntry<"blog">["data"];
	headings: MarkdownHeading[];
	readTime: string;
};

const { data, readTime, headings, id } = Astro.props;
const { title, description, publishDate, updatedDate, heroImage, tags, category, author } = data;

const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
---

<BaseLayout
	title={title}
	description={description}
	image={heroImage?.src}
	articleDate={articleDate}
>
	<article class="mt-12 min-w-full sm:max-w-none md:max-w-none md:py-4">
		<header class="mb-3 flex flex-col gap-6">
			<div class="flex flex-wrap gap-2">
				<div class="min-h-full">
					<Image
						src={heroImage}
						width={200}
						height={200}
						format="webp"
						class="h-16 w-16 rounded-full object-cover"
						alt={`img of ${title}`}
					/>
				</div>

				<div class="flex items-center justify-center">
					<h1 class="text-4xl font-semibold md:pb-2.5 md:text-4xl">
						{description}
					</h1>
				</div>
			</div>

			<div class="flex gap-x-1">
				<p class="text-center text-sm font-bold text-opacity-50">
					{author}
				</p>
				<p class="text-center text-sm font-bold text-opacity-50">
					/ {category}
				</p>
				<p class="text-center text-sm text-opacity-50">
					/ <FormattedDate date={publishDate} />
				</p>
				<p class="text-center text-sm font-bold text-opacity-50">
					/ {readTime}
				</p>
				<!-- {
					data.updatedDate && (
						<span class="text-quote rounded-lg p-1">
							Last Updated:
							<FormattedDate date={data.updatedDate} />
						</span>
					)
				} -->
			</div>
		</header>

		<!-- annotate blog post image -->
		<!-- <>
			{
				heroImage && (
					<Image
						src={heroImage}
						width={1000}
						height={500}
						quality={100}
						format="jpg"
						loading="eager"
						class="my-8 max-h-[300px] w-full rounded-md object-cover md:max-h-[500px]"
						alt={`img of ${title}`}
					/>
				)
			}
		</> -->

		<hr />

		<div>
			<slot />
		</div>
	</article>
	<button
		aria-label="Back to Top"
		class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-[#f8f9fa99] text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:border-slate-50/[0.06] dark:bg-slate-900/75 sm:end-8 sm:h-12 sm:w-12"
		data-show="false"
		id="to-top-btn"
		style="opacity: 1;--tw-translate-y: -26px;
		transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));"
	>
		<BackToTop />
	</button>
</BaseLayout>

<script>
	const fnObserver = () => {
		function handleIntersection(
			entries: IntersectionObserverEntry[],
			observer: IntersectionObserver,
		) {
			entries.forEach((entry) => {
				const index = document.querySelector(`aside a[href="#${entry.target.id}"]`);
				if (entry.isIntersecting) {
					index?.classList.remove("bg-slate-200", "dark:bg-slate-800"); // remove bg
					index?.classList.add(
						"bg-indigo-600",
						"dark:bg-indigo-700",
						"text-white",
						"font-bold",
						"transition-colors",
						"duration-200",
					);
				} else {
					index?.classList.add("bg-slate-200", "dark:bg-slate-800"); // add bg
					index?.classList.remove(
						"bg-indigo-600",
						"dark:bg-indigo-700",
						"text-white",
						"font-bold",
						"transition-colors",
						"duration-200",
					);
				}

				// 右侧内容滚动 左侧活动菜单到大小时,滚动到对应位置
				const rect = index?.getBoundingClientRect();
				if (!rect) return;
				if (rect.top < 0 || rect.bottom > window.innerHeight) {
					const sidebar = document.querySelector(".sidebar");
					const sidebarRect = sidebar?.getBoundingClientRect();
					if (!sidebarRect || !sidebar) return;
					const scrollOffset = rect.top - sidebarRect.top - sidebar.clientHeight / 2;
					sidebar.scrollTop += scrollOffset;
				}
			});
		}

		const headings = document.querySelectorAll(
			"div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6",
		);

		const options = {
			root: null,
			rootMargin: " 15% 0px 0% 0px ",
			threshold: 1,
		};

		const observer = new IntersectionObserver(handleIntersection, options);

		headings.forEach((heading) => {
			observer.observe(heading);
		});
	};
	fnObserver();
	document.addEventListener("astro:after-swap", fnObserver);

	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
	});
</script>
