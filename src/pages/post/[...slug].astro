---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "@/layouts/BlogPost";
import Code from "@/components/mdx/Code";
import ListRelatedPosts from "@/components/ListRelatedPosts";
import Share from "@/components/Share";
import TableOfContents from "@/components/TableOfContents";
import FixedTableOfContents from "@/components/FixedTableOfContents";
import { getPosts } from "@/utils";
import SButton from "@/components/mdx/SButton";
import Disqus from "@/components/Disqus";
import { disqusConfig } from "@/data/disqus.config";
import { LOCALES } from "@/data/locale";
import useStore from "../../zustand/store";
import Tag from "@/components/Tag";

const posts = await getPosts(null);
export async function getStaticPaths() {
	const paths = [];
	for (const locale of LOCALES) {
		const posts = await getPosts(locale);
		let map = posts.map((post: any) => ({
			params: { slug: post.slug },
			props: post,
		}));

		paths.push(...map);
	}
	return paths;
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const MAX_POSTS = 3;
const getRelatedPosts = (post: Props) => {
	const lowercaseTags = post.data.tags.map((tag: any) => tag.toLowerCase());
	const relatedPosts = posts.filter(
		(p: any) =>
			p.slug !== post.slug && p.data.tags.some((t: any) => lowercaseTags.includes(t.toLowerCase())),
	);
	return relatedPosts.slice(0, MAX_POSTS);
};

const relatedPosts = getRelatedPosts(post);

const { Content, headings, remarkPluginFrontmatter } = await post.render();

const disqusEnabled = disqusConfig.enabled;

const { tags } = post.data;
---

<BlogPost
	id={post.id}
	data={post.data}
	headings={headings}
	readTime={remarkPluginFrontmatter.minutesRead}
>
	<!-- <div class="mt-8 grid grid-cols-1 gap-10 md:grid-cols-[20%_auto]"> -->
	<div class="mt-8 grid grid-cols-1 gap-10">
		<!-- aside  -->
		<!-- Left menu bar comments -->
		<!-- <aside class="hidden flex-col gap-8 md:flex">
			<div class="sticky top-12 z-10 hidden self-start transition-all duration-200 md:block">
				{headings && headings.length > 0 && <TableOfContents {headings} />}
			</div>
		</aside> -->

		<!-- post -->
		<article class="grid w-full max-w-full">
			<div class="prose prose-lg mb-12 min-w-full dark:prose-invert md:prose-xl">
				<Content components={{ pre: Code, SButton }} />
			</div>

			<div class="mb-12 flex flex-wrap gap-2 gap-y-4 md:gap-5">
				{tags.map((tag: any) => <Tag tag={tag} />)}
			</div>

			<!-- related posts -->
			<footer>
				<h2 class="mb-6 text-lg font-bold dark:text-white">Related Posts</h2>
				<ListRelatedPosts posts={relatedPosts} />
			</footer>
		</article>
	</div>

	{disqusEnabled && <Disqus />}
</BlogPost>

<FixedTableOfContents {headings} />
